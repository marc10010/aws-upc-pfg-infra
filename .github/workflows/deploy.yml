name: Deploy Infrastructure

on:
  push:
    branches: [ main, develop, observabilityBranch ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.12.2'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init -backend-config=backend.conf

    - name: Force Unlock Any Stuck Locks
      run: |
        echo "Checking for stuck locks..."
        # Try to get lock info and extract lock ID
        LOCK_OUTPUT=$(terraform plan -var="account_name=marc10010" 2>&1 || true)
        if echo "$LOCK_OUTPUT" | grep -q "Lock Info:"; then
          LOCK_ID=$(echo "$LOCK_OUTPUT" | grep -A 10 "Lock Info:" | grep "ID:" | sed 's/.*ID:[[:space:]]*//' | tr -d ' ')
          if [ -n "$LOCK_ID" ]; then
            echo "Found stuck lock with ID: $LOCK_ID"
            echo "Attempting to force unlock..."
            terraform force-unlock -force "$LOCK_ID" || echo "Failed to unlock $LOCK_ID"
          fi
        else
          echo "No stuck locks found"
        fi
      continue-on-error: true

    - name: Terraform Plan
      run: terraform plan -var="account_name=marc10010" -lock-timeout=2m
      continue-on-error: true

    - name: Terraform Apply Infrastructure
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -var="account_name=marc10010"

    - name: Get Grafana IP
      id: grafana-ip
      if: github.ref == 'refs/heads/main'
      run: |
        GRAFANA_IP=$(terraform output -raw grafana_private_ip)
        echo "grafana_ip=$GRAFANA_IP" >> $GITHUB_OUTPUT
        echo "Grafana IP: $GRAFANA_IP"

    - name: Get Grafana Password
      id: grafana-password
      if: github.ref == 'refs/heads/main'
      run: |
        GRAFANA_PASSWORD=$(terraform output -raw grafana_admin_password)
        echo "grafana_password=$GRAFANA_PASSWORD" >> $GITHUB_OUTPUT


    - name: Wait for Grafana to be ready
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Esperando a que Grafana estÃ© disponible..."
        timeout 300 bash -c 'until curl -s http://${{ steps.grafana-ip.outputs.grafana_ip }}:3000/api/health; do sleep 10; done'
        echo "Grafana estÃ¡ listo!"

    - name: Force Unlock Before Grafana Config
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Checking for locks before Grafana configuration..."
        # Check if there are any locks before applying Grafana config
        LOCK_OUTPUT=$(terraform plan -var="grafana_ip=${{ steps.grafana-ip.outputs.grafana_ip }}" -var="grafana_password=${{ steps.grafana-password.outputs.grafana_password }}" -var="account_name=marc10010" 2>&1 || true)
        if echo "$LOCK_OUTPUT" | grep -q "Lock Info:"; then
          LOCK_ID=$(echo "$LOCK_OUTPUT" | grep -A 10 "Lock Info:" | grep "ID:" | sed 's/.*ID:[[:space:]]*//' | tr -d ' ')
          if [ -n "$LOCK_ID" ]; then
            echo "Found stuck lock with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID" || echo "Failed to unlock $LOCK_ID"
          fi
        else
          echo "No locks found, proceeding..."
        fi
      continue-on-error: true

    - name: Apply Grafana Configuration
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve -lock-timeout=2m \
          -var="grafana_ip=${{ steps.grafana-ip.outputs.grafana_ip }}" \
          -var="grafana_password=${{ steps.grafana-password.outputs.grafana_password }}"

    - name: Output Grafana URL
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸŽ‰ Despliegue completado!"
        echo "Grafana URL: http://${{ steps.grafana-ip.outputs.grafana_ip }}:3000"
        echo "Usuario: admin"
        echo "ContraseÃ±a: ${{ steps.grafana-password.outputs.grafana_password }}"
